/* The following code was generated by JFlex 1.4.3 on 20/01/20 06:01 PM */

package AnalyzerLexer;
import static AnalyzerLexer.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/01/20 06:01 PM from the specification file
 * <tt>C:/Users/Usuario/Documents/NetBeansProjects/GrammarReceipt/src/AnalyzerLexer/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\12\2\0\1\3\22\0\1\42\2\0\1\43\1\54"+
    "\1\55\1\0\1\62\1\52\1\53\1\47\1\46\1\3\1\44\1\56"+
    "\1\45\12\2\1\61\1\60\1\0\1\51\1\0\1\57\1\0\2\1"+
    "\1\25\1\30\1\31\6\1\1\32\1\13\1\34\1\1\1\22\1\1"+
    "\1\4\1\17\1\33\6\1\4\0\1\50\1\0\1\20\1\1\1\6"+
    "\1\16\1\5\1\41\1\37\1\14\1\7\1\40\1\1\1\21\1\27"+
    "\1\36\1\15\1\10\1\1\1\23\1\26\1\11\1\24\1\1\1\35"+
    "\1\63\2\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\4\12\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\3\1\0\2\3"+
    "\1\0\3\3\1\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\1\1\0\1\25\1\3\1\26\1\27\1\3\1\30"+
    "\1\3\1\31\2\3\1\32\4\3\3\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\2\3\1\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\10\3\2\0\1\3\1\0"+
    "\10\3\1\0\1\33\1\3\1\0\7\3\1\0\2\3"+
    "\2\0\2\3\1\0\2\3\1\0\4\3\1\0\2\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\2\27\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\64\0\64\0\64\0\64\0\150\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\64\0\u0340"+
    "\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0"+
    "\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u03a8\0\u0784\0\u07b8\0\150"+
    "\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u030c\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u10a8\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0"+
    "\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630"+
    "\0\u2664\0\u2698\0\u26cc\0\u2700\0\64\0\u0340\0\u2734\0\u2768"+
    "\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908"+
    "\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8"+
    "\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48"+
    "\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8"+
    "\0\u2e1c\0\u2e50\0\u2e84";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\3\1\7\1\3"+
    "\1\5\4\3\1\10\2\3\1\11\2\3\1\12\2\3"+
    "\1\13\1\14\2\3\1\15\2\3\1\16\1\17\1\3"+
    "\1\5\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\3\65\0\1\3\1\40\1\0\6\3\1\0"+
    "\27\3\1\41\5\0\1\3\12\0\1\3\1\0\1\40"+
    "\1\4\1\0\6\40\1\0\27\40\6\0\1\40\12\0"+
    "\1\42\3\0\1\5\6\0\1\5\27\0\1\5\22\0"+
    "\1\3\1\40\1\0\1\3\1\43\4\3\1\0\27\3"+
    "\1\41\1\44\4\0\1\3\12\0\1\3\1\0\1\3"+
    "\1\40\1\0\6\3\1\0\23\3\1\45\3\3\1\41"+
    "\5\0\1\3\12\0\1\3\1\0\1\3\1\40\1\0"+
    "\6\3\1\0\5\3\1\46\10\3\1\47\10\3\1\41"+
    "\1\50\4\0\1\3\12\0\1\3\1\0\1\3\1\40"+
    "\1\0\6\3\1\0\10\3\1\51\16\3\1\41\1\52"+
    "\4\0\1\3\12\0\1\3\1\0\1\3\1\40\1\0"+
    "\6\3\1\0\10\3\1\53\1\54\15\3\1\41\1\55"+
    "\4\0\1\3\12\0\1\3\1\0\1\3\1\40\1\0"+
    "\1\3\1\56\4\3\1\0\16\3\1\57\10\3\1\41"+
    "\5\0\1\3\12\0\1\3\1\0\1\3\1\40\1\0"+
    "\6\3\1\0\3\3\1\60\23\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\1\3\1\40\1\0\1\3\1\61"+
    "\4\3\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\1\3\1\40\1\0\3\3\1\62\2\3\1\0"+
    "\27\3\1\41\5\0\1\3\12\0\1\3\1\0\1\3"+
    "\1\40\1\0\4\3\1\45\1\3\1\0\27\3\1\41"+
    "\5\0\1\3\12\0\1\3\2\0\1\63\62\0\2\40"+
    "\1\0\6\40\1\0\27\40\6\0\1\40\12\0\1\40"+
    "\2\0\1\64\62\0\1\40\1\65\1\0\6\40\1\0"+
    "\27\40\6\0\1\40\12\0\1\40\1\0\1\3\1\40"+
    "\1\0\2\3\1\66\3\3\1\0\27\3\1\41\5\0"+
    "\1\3\12\0\1\3\2\0\1\67\62\0\1\3\1\40"+
    "\1\0\6\3\1\0\24\3\1\70\2\3\1\41\5\0"+
    "\1\3\12\0\1\3\1\0\1\3\1\40\1\0\6\3"+
    "\1\0\6\3\1\71\20\3\1\41\5\0\1\3\12\0"+
    "\1\3\1\0\1\3\1\40\1\0\6\3\1\0\20\3"+
    "\1\70\6\3\1\41\5\0\1\3\12\0\1\3\2\0"+
    "\1\72\62\0\1\3\1\40\1\0\6\3\1\0\2\3"+
    "\1\73\24\3\1\41\5\0\1\3\12\0\1\3\2\0"+
    "\1\74\62\0\1\3\1\40\1\0\1\3\1\75\4\3"+
    "\1\0\27\3\1\41\5\0\1\3\12\0\1\3\1\0"+
    "\1\3\1\40\1\0\6\3\1\0\13\3\1\76\13\3"+
    "\1\41\5\0\1\3\12\0\1\3\2\0\1\77\62\0"+
    "\1\3\1\40\1\0\6\3\1\0\6\3\1\100\20\3"+
    "\1\41\5\0\1\3\12\0\1\3\1\0\1\3\1\40"+
    "\1\0\6\3\1\0\17\3\1\101\7\3\1\41\5\0"+
    "\1\3\12\0\1\3\1\0\1\3\1\40\1\0\3\3"+
    "\1\102\2\3\1\0\27\3\1\41\5\0\1\3\12\0"+
    "\1\3\1\0\1\3\1\40\1\0\6\3\1\0\22\3"+
    "\1\103\4\3\1\41\5\0\1\3\12\0\1\3\1\0"+
    "\1\3\1\40\1\0\6\3\1\0\26\3\1\70\1\41"+
    "\5\0\1\3\12\0\1\3\2\0\1\63\40\0\1\104"+
    "\22\0\1\64\37\0\1\105\1\106\21\0\1\3\1\40"+
    "\1\0\1\3\1\107\4\3\1\0\27\3\1\41\5\0"+
    "\1\3\12\0\1\3\2\0\1\67\1\0\1\110\60\0"+
    "\1\3\1\40\1\0\1\3\1\111\4\3\1\0\27\3"+
    "\1\41\5\0\1\3\12\0\1\3\2\0\1\72\14\0"+
    "\1\112\45\0\1\3\1\40\1\0\6\3\1\0\3\3"+
    "\1\113\23\3\1\41\5\0\1\3\12\0\1\3\2\0"+
    "\1\74\17\0\1\114\42\0\1\3\1\40\1\0\6\3"+
    "\1\0\5\3\1\115\21\3\1\41\5\0\1\3\12\0"+
    "\1\3\1\0\1\3\1\40\1\0\5\3\1\116\1\0"+
    "\27\3\1\41\5\0\1\3\12\0\1\3\2\0\1\77"+
    "\22\0\1\117\37\0\1\3\1\40\1\0\1\3\1\115"+
    "\4\3\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\1\3\1\40\1\0\6\3\1\0\16\3\1\120"+
    "\10\3\1\41\5\0\1\3\12\0\1\3\1\0\1\3"+
    "\1\40\1\0\5\3\1\103\1\0\27\3\1\41\5\0"+
    "\1\3\12\0\1\3\1\0\1\3\1\40\1\0\1\121"+
    "\5\3\1\0\4\3\1\122\2\3\1\123\2\3\1\124"+
    "\14\3\1\41\5\0\1\3\12\0\1\3\43\0\1\125"+
    "\22\0\1\126\62\0\1\3\1\40\1\0\3\3\1\127"+
    "\2\3\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\43\0\1\44\20\0\1\130\1\131\1\132\1\130\6\131"+
    "\1\0\27\131\1\133\5\130\1\131\12\130\1\131\43\0"+
    "\1\50\21\0\1\3\1\40\1\0\6\3\1\0\11\3"+
    "\1\134\15\3\1\41\5\0\1\3\12\0\1\3\43\0"+
    "\1\52\21\0\1\3\1\40\1\0\5\3\1\135\1\0"+
    "\27\3\1\41\5\0\1\3\12\0\1\3\1\0\1\3"+
    "\1\40\1\0\6\3\1\0\2\3\1\136\24\3\1\41"+
    "\5\0\1\3\12\0\1\3\43\0\1\55\21\0\1\3"+
    "\1\40\1\0\6\3\1\0\20\3\1\137\6\3\1\41"+
    "\5\0\1\3\12\0\1\3\1\0\1\3\1\40\1\0"+
    "\1\3\1\140\4\3\1\0\27\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\1\3\1\40\1\0\6\3\1\0"+
    "\5\3\1\141\21\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\1\3\1\40\1\0\6\3\1\0\10\3\1\142"+
    "\16\3\1\41\5\0\1\3\12\0\1\3\1\0\1\3"+
    "\1\40\1\0\6\3\1\0\11\3\1\143\15\3\1\41"+
    "\5\0\1\3\12\0\1\3\2\0\1\144\63\0\1\126"+
    "\41\0\1\145\20\0\1\3\1\40\1\0\4\3\1\146"+
    "\1\3\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\13\0\1\147\51\0\1\3\1\40\1\0\6\3\1\0"+
    "\1\150\26\3\1\41\5\0\1\3\12\0\1\3\1\0"+
    "\2\40\1\0\6\40\1\0\1\151\26\40\6\0\1\40"+
    "\12\0\1\40\2\0\1\64\10\0\1\147\51\0\1\3"+
    "\1\40\1\0\2\3\1\152\3\3\1\0\27\3\1\41"+
    "\5\0\1\3\12\0\1\3\1\0\1\3\1\40\1\0"+
    "\1\3\1\103\4\3\1\0\27\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\1\3\1\40\1\0\6\3\1\0"+
    "\14\3\1\153\12\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\1\3\1\40\1\0\6\3\1\0\16\3\1\70"+
    "\10\3\1\41\5\0\1\3\12\0\1\3\1\0\1\3"+
    "\1\40\1\0\2\3\1\154\3\3\1\0\27\3\1\41"+
    "\5\0\1\3\12\0\1\3\1\0\1\3\1\40\1\0"+
    "\6\3\1\0\6\3\1\155\20\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\1\3\1\40\1\0\6\3\1\0"+
    "\2\3\1\156\24\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\1\3\1\40\1\0\6\3\1\0\13\3\1\157"+
    "\13\3\1\41\5\0\1\3\12\0\1\3\1\0\1\160"+
    "\1\144\1\0\6\160\1\0\27\160\6\0\1\160\12\0"+
    "\1\160\2\0\1\161\62\0\1\3\1\40\1\0\5\3"+
    "\1\162\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\5\0\1\163\57\0\1\3\1\40\1\0\1\3\1\164"+
    "\4\3\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\2\40\1\0\1\40\1\165\4\40\1\0\27\40"+
    "\6\0\1\40\12\0\1\40\1\0\1\3\1\40\1\0"+
    "\5\3\1\166\1\0\27\3\1\41\5\0\1\3\12\0"+
    "\1\3\1\0\1\3\1\40\1\0\1\3\1\167\4\3"+
    "\1\0\27\3\1\41\5\0\1\3\12\0\1\3\1\0"+
    "\1\3\1\40\1\0\1\3\1\170\4\3\1\0\27\3"+
    "\1\41\5\0\1\3\12\0\1\3\1\0\1\3\1\40"+
    "\1\0\1\3\1\70\4\3\1\0\27\3\1\41\5\0"+
    "\1\3\12\0\1\3\1\0\1\3\1\40\1\0\6\3"+
    "\1\0\3\3\1\171\23\3\1\41\5\0\1\3\12\0"+
    "\1\3\1\0\1\3\1\40\1\0\5\3\1\172\1\0"+
    "\27\3\1\41\5\0\1\3\12\0\1\3\1\0\1\160"+
    "\2\0\6\160\1\0\27\160\2\0\1\145\3\0\1\160"+
    "\12\0\1\160\1\173\1\174\1\175\1\173\6\174\1\0"+
    "\27\174\1\176\5\173\1\174\12\173\1\174\11\0\1\177"+
    "\53\0\1\3\1\40\1\0\5\3\1\200\1\0\27\3"+
    "\1\41\5\0\1\3\12\0\1\3\1\0\2\40\1\0"+
    "\5\40\1\201\1\0\27\40\6\0\1\40\12\0\1\40"+
    "\1\202\1\203\1\204\1\202\6\203\1\0\27\203\1\205"+
    "\5\202\1\203\12\202\1\203\1\0\1\3\1\40\1\0"+
    "\6\3\1\0\10\3\1\206\16\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\1\3\1\40\1\0\3\3\1\207"+
    "\2\3\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\1\3\1\40\1\0\6\3\1\0\11\3\1\210"+
    "\15\3\1\41\5\0\1\3\12\0\1\3\1\0\1\3"+
    "\1\40\1\0\6\3\1\0\2\3\1\211\24\3\1\41"+
    "\5\0\1\3\12\0\1\3\13\0\1\212\51\0\1\3"+
    "\1\40\1\0\6\3\1\0\1\213\26\3\1\41\5\0"+
    "\1\3\12\0\1\3\1\0\2\40\1\0\6\40\1\0"+
    "\1\214\26\40\6\0\1\40\12\0\1\40\2\0\1\64"+
    "\10\0\1\212\64\0\1\215\50\0\1\3\1\40\1\0"+
    "\6\3\1\0\1\3\1\216\25\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\2\40\1\0\6\40\1\0\1\40"+
    "\1\217\25\40\6\0\1\40\12\0\1\40\13\0\1\220"+
    "\51\0\1\3\1\40\1\0\6\3\1\0\1\221\26\3"+
    "\1\41\5\0\1\3\12\0\1\3\1\0\2\40\1\0"+
    "\6\40\1\0\1\222\26\40\6\0\1\40\12\0\1\40"+
    "\2\0\1\64\10\0\1\220\50\0\1\223\1\224\1\225"+
    "\1\223\6\224\1\0\27\224\1\226\5\223\1\224\12\223"+
    "\1\224\1\0\1\3\1\40\1\0\4\3\1\227\1\3"+
    "\1\0\27\3\1\41\5\0\1\3\12\0\1\3\1\0"+
    "\1\3\1\40\1\0\2\3\1\227\3\3\1\0\27\3"+
    "\1\41\5\0\1\3\12\0\1\3\1\0\1\3\1\40"+
    "\1\0\6\3\1\0\14\3\1\230\12\3\1\41\5\0"+
    "\1\3\12\0\1\3\5\0\1\231\57\0\1\3\1\40"+
    "\1\0\1\3\1\232\4\3\1\0\27\3\1\41\5\0"+
    "\1\3\12\0\1\3\1\0\2\40\1\0\1\40\1\233"+
    "\4\40\1\0\27\40\6\0\1\40\12\0\1\40\15\0"+
    "\1\234\47\0\1\3\1\40\1\0\6\3\1\0\2\3"+
    "\1\235\24\3\1\41\5\0\1\3\12\0\1\3\1\0"+
    "\2\40\1\0\6\40\1\0\2\40\1\236\24\40\6\0"+
    "\1\40\12\0\1\40\5\0\1\237\57\0\1\3\1\40"+
    "\1\0\1\3\1\240\4\3\1\0\27\3\1\41\5\0"+
    "\1\3\12\0\1\3\1\0\2\40\1\0\1\40\1\241"+
    "\4\40\1\0\27\40\6\0\1\40\12\0\1\40\13\0"+
    "\1\242\51\0\1\3\1\40\1\0\6\3\1\0\1\243"+
    "\26\3\1\41\5\0\1\3\12\0\1\3\1\0\2\40"+
    "\1\0\6\40\1\0\1\244\26\40\6\0\1\40\12\0"+
    "\1\40\2\0\1\64\10\0\1\242\51\0\1\3\1\40"+
    "\1\0\5\3\1\70\1\0\27\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\1\3\1\40\1\0\1\3\1\245"+
    "\4\3\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\11\0\1\246\53\0\1\3\1\40\1\0\5\3\1\247"+
    "\1\0\27\3\1\41\5\0\1\3\12\0\1\3\1\0"+
    "\2\40\1\0\5\40\1\250\1\0\27\40\6\0\1\40"+
    "\12\0\1\40\16\0\1\251\46\0\1\3\1\40\1\0"+
    "\6\3\1\0\3\3\1\252\23\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\2\40\1\0\6\40\1\0\3\40"+
    "\1\253\23\40\6\0\1\40\12\0\1\40\11\0\1\254"+
    "\53\0\1\3\1\40\1\0\5\3\1\255\1\0\27\3"+
    "\1\41\5\0\1\3\12\0\1\3\1\0\2\40\1\0"+
    "\5\40\1\256\1\0\27\40\6\0\1\40\12\0\1\40"+
    "\5\0\1\257\57\0\1\3\1\40\1\0\1\3\1\260"+
    "\4\3\1\0\27\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\2\40\1\0\1\40\1\261\4\40\1\0\27\40"+
    "\6\0\1\40\12\0\1\40\1\0\1\3\1\40\1\0"+
    "\6\3\1\0\10\3\1\70\16\3\1\41\5\0\1\3"+
    "\12\0\1\3\14\0\1\262\50\0\1\3\1\40\1\0"+
    "\6\3\1\0\1\3\1\263\25\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\2\40\1\0\6\40\1\0\1\40"+
    "\1\264\25\40\6\0\1\40\12\0\1\40\17\0\1\265"+
    "\45\0\1\3\1\40\1\0\6\3\1\0\4\3\1\122"+
    "\22\3\1\41\5\0\1\3\12\0\1\3\1\0\2\40"+
    "\1\0\6\40\1\0\4\40\1\266\22\40\6\0\1\40"+
    "\12\0\1\40\14\0\1\267\50\0\1\3\1\40\1\0"+
    "\6\3\1\0\1\3\1\270\25\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\2\40\1\0\6\40\1\0\1\40"+
    "\1\271\25\40\6\0\1\40\12\0\1\40\11\0\1\272"+
    "\53\0\1\3\1\40\1\0\5\3\1\273\1\0\27\3"+
    "\1\41\5\0\1\3\12\0\1\3\1\0\2\40\1\0"+
    "\5\40\1\274\1\0\27\40\6\0\1\40\12\0\1\40"+
    "\15\0\1\275\47\0\1\3\1\40\1\0\6\3\1\0"+
    "\2\3\1\276\24\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\2\40\1\0\6\40\1\0\2\40\1\277\24\40"+
    "\6\0\1\40\12\0\1\40\20\0\1\300\44\0\2\40"+
    "\1\0\6\40\1\0\5\40\1\301\21\40\6\0\1\40"+
    "\12\0\1\40\15\0\1\302\47\0\1\3\1\40\1\0"+
    "\6\3\1\0\2\3\1\303\24\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\2\40\1\0\6\40\1\0\2\40"+
    "\1\304\24\40\6\0\1\40\12\0\1\40\14\0\1\305"+
    "\50\0\1\3\1\40\1\0\6\3\1\0\1\3\1\306"+
    "\25\3\1\41\5\0\1\3\12\0\1\3\1\0\2\40"+
    "\1\0\6\40\1\0\1\40\1\307\25\40\6\0\1\40"+
    "\12\0\1\40\16\0\1\310\46\0\1\3\1\40\1\0"+
    "\6\3\1\0\3\3\1\311\23\3\1\41\5\0\1\3"+
    "\12\0\1\3\1\0\2\40\1\0\6\40\1\0\3\40"+
    "\1\312\23\40\6\0\1\40\12\0\1\40\21\0\1\313"+
    "\43\0\2\40\1\0\6\40\1\0\6\40\1\314\20\40"+
    "\6\0\1\40\12\0\1\40\16\0\1\315\46\0\1\3"+
    "\1\40\1\0\6\3\1\0\3\3\1\316\23\3\1\41"+
    "\5\0\1\3\12\0\1\3\1\0\2\40\1\0\6\40"+
    "\1\0\3\40\1\317\23\40\6\0\1\40\12\0\1\40"+
    "\15\0\1\320\47\0\1\3\1\40\1\0\6\3\1\0"+
    "\2\3\1\321\24\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\2\40\1\0\6\40\1\0\2\40\1\322\24\40"+
    "\6\0\1\40\12\0\1\40\4\0\1\323\60\0\1\3"+
    "\1\40\1\0\1\121\5\3\1\0\27\3\1\41\5\0"+
    "\1\3\12\0\1\3\1\0\2\40\1\0\1\324\5\40"+
    "\1\0\27\40\6\0\1\40\12\0\1\40\5\0\1\325"+
    "\57\0\2\40\1\0\1\40\1\326\4\40\1\0\27\40"+
    "\6\0\1\40\12\0\1\40\22\0\1\327\42\0\1\3"+
    "\1\40\1\0\6\3\1\0\7\3\1\123\17\3\1\41"+
    "\5\0\1\3\12\0\1\3\1\0\2\40\1\0\6\40"+
    "\1\0\7\40\1\330\17\40\6\0\1\40\12\0\1\40"+
    "\16\0\1\331\46\0\1\3\1\40\1\0\6\3\1\0"+
    "\3\3\1\332\23\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\2\40\1\0\6\40\1\0\3\40\1\333\23\40"+
    "\6\0\1\40\12\0\1\40\5\0\1\334\57\0\2\40"+
    "\1\0\1\40\1\335\4\40\1\0\27\40\6\0\1\40"+
    "\12\0\1\40\23\0\1\336\41\0\2\40\1\0\6\40"+
    "\1\0\10\40\1\337\16\40\6\0\1\40\12\0\1\40"+
    "\25\0\1\340\37\0\1\3\1\40\1\0\6\3\1\0"+
    "\12\3\1\124\14\3\1\41\5\0\1\3\12\0\1\3"+
    "\1\0\2\40\1\0\6\40\1\0\12\40\1\341\14\40"+
    "\6\0\1\40\12\0\1\40\6\0\1\342\56\0\2\40"+
    "\1\0\2\40\1\343\3\40\1\0\27\40\6\0\1\40"+
    "\12\0\1\40\15\0\1\344\47\0\2\40\1\0\6\40"+
    "\1\0\2\40\1\345\24\40\6\0\1\40\12\0\1\40"+
    "\24\0\1\346\40\0\2\40\1\0\6\40\1\0\11\40"+
    "\1\347\15\40\6\0\1\40\12\0\1\40\5\0\1\350"+
    "\57\0\2\40\1\0\1\40\1\351\4\40\1\0\27\40"+
    "\6\0\1\40\12\0\1\40\16\0\1\352\46\0\2\40"+
    "\1\0\6\40\1\0\3\40\1\353\23\40\6\0\1\40"+
    "\12\0\1\40\26\0\1\354\36\0\2\40\1\0\6\40"+
    "\1\0\13\40\1\355\13\40\6\0\1\40\12\0\1\40"+
    "\7\0\1\356\55\0\2\40\1\0\3\40\1\357\2\40"+
    "\1\0\27\40\6\0\1\40\12\0\1\40\24\0\1\360"+
    "\40\0\2\40\1\0\6\40\1\0\11\40\1\361\15\40"+
    "\6\0\1\40\12\0\1\40\11\0\1\362\53\0\2\40"+
    "\1\0\5\40\1\363\1\0\27\40\6\0\1\40\12\0"+
    "\1\40\10\0\1\364\54\0\2\40\1\0\4\40\1\365"+
    "\1\40\1\0\27\40\6\0\1\40\12\0\1\40\6\0"+
    "\1\364\56\0\2\40\1\0\2\40\1\365\3\40\1\0"+
    "\27\40\6\0\1\40\12\0\1\40\15\0\1\366\47\0"+
    "\2\40\1\0\6\40\1\0\2\40\1\367\24\40\6\0"+
    "\1\40\12\0\1\40\11\0\1\325\53\0\2\40\1\0"+
    "\5\40\1\326\1\0\27\40\6\0\1\40\12\0\1\40"+
    "\27\0\1\370\35\0\2\40\1\0\6\40\1\0\14\40"+
    "\1\371\12\40\6\0\1\40\12\0\1\40\5\0\1\372"+
    "\57\0\2\40\1\0\1\40\1\373\4\40\1\0\27\40"+
    "\6\0\1\40\12\0\1\40\23\0\1\325\41\0\2\40"+
    "\1\0\6\40\1\0\10\40\1\326\16\40\6\0\1\40"+
    "\12\0\1\40";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\16\1\4\11\1\1\12\11\1\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\6\1\1\0\17\1\3\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\5\1\2\0\1\1\1\0"+
    "\2\1\1\0\10\1\2\0\1\1\1\0\10\1\1\0"+
    "\2\1\1\0\7\1\1\0\2\1\2\0\2\1\1\0"+
    "\2\1\1\0\4\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { lexeme=yytext(); return Dot;
          }
        case 28: break;
        case 9: 
          { lexeme=yytext(); return Asterisk;
          }
        case 29: break;
        case 11: 
          { lexeme=yytext(); return Equal;
          }
        case 30: break;
        case 1: 
          { lexeme=yytext(); return Identifying;
          }
        case 31: break;
        case 23: 
          { lexeme=yytext(); return ReservedWords;
          }
        case 32: break;
        case 15: 
          { lexeme=yytext(); return Percent;
          }
        case 33: break;
        case 26: 
          { lexeme=yytext(); return IdentifyingCustomer;
          }
        case 34: break;
        case 25: 
          { lexeme=yytext(); return IdentifyingProduct;
          }
        case 35: break;
        case 18: 
          { lexeme=yytext(); return SemiColon;
          }
        case 36: break;
        case 5: 
          { lexeme=yytext(); return NumberSign;
          }
        case 37: break;
        case 24: 
          { lexeme=yytext(); return IdentifyingSale;
          }
        case 38: break;
        case 12: 
          { lexeme=yytext(); return OpenParenthesis;
          }
        case 39: break;
        case 14: 
          { lexeme=yytext(); return Dollar;
          }
        case 40: break;
        case 3: 
          { lexeme=yytext(); return Word;
          }
        case 41: break;
        case 8: 
          { lexeme=yytext(); return Plus;
          }
        case 42: break;
        case 10: 
          { lexeme=yytext(); return Underscore;
          }
        case 43: break;
        case 7: 
          { lexeme=yytext(); return Separating;
          }
        case 44: break;
        case 6: 
          { lexeme=yytext(); return Minus;
          }
        case 45: break;
        case 20: 
          { lexeme=yytext(); return SingleQuotes;
          }
        case 46: break;
        case 13: 
          { lexeme=yytext(); return CloseParenthesis;
          }
        case 47: break;
        case 2: 
          { return ERROR;
          }
        case 48: break;
        case 22: 
          { lexeme=yytext(); return IdentifyingReceipt;
          }
        case 49: break;
        case 19: 
          { lexeme=yytext(); return Colon;
          }
        case 50: break;
        case 4: 
          { /*Ignore*/
          }
        case 51: break;
        case 27: 
          { lexeme=yytext(); return Address;
          }
        case 52: break;
        case 17: 
          { lexeme=yytext(); return QuestionMark;
          }
        case 53: break;
        case 21: 
          { lexeme=yytext(); return Signature;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
